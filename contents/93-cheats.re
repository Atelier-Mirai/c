= Ｃ言語 簡易まとめ

//abstract{
  Ｃ言語の文法に関する簡易なまとめです。
//}

=== コメント
プログラミング言語では、ソースコード中に記述されるがコードとしては解釈されない、人に向けた文字列をコメントといいます。主にコードの記述者が別の開発者などにコードの意味や動作、使い方、注意点等について注釈や説明を加える為に使われます。 @<fn>{comment}
//footnote[comment][出典：IT用語辞典]

Ｃ言語では、コメントは以下のように記述します。

//vspace[latex][7mm]

//table[][][csv=on]{
記述例, 説明
============
@<code>{/* コメント */}, 複数行コメント
@<code>{// コメント}, 一行コメント（便利なので多用されます）
//}

=== データ型
//quote{
//noindent
変数とは、コンピュータプログラムのソースコードなどで、データを一時的に記憶しておくための領域に固有の名前を付けたもの。 @<fn>{fn-data}
//}
//footnote[fn-data][出典：IT用語辞典]

Ｃ言語では、文字型の変数を宣言する際には、@<code>{char c;}、整数型の変数を宣言する際には、@<code>{int n;} などの型が用意されています。

//table[][]{
コード例	説明
-----------------
@<code>{char}	@<B>{文字型}。一文字分のアルファベット(1バイト 2^8 -128〜+127までの整数)
@<code>{int}	@<B>{整数型}。4バイト 2^32 -2147483648 〜 +2147483647までの整数)
@<code>{long}	@<B>{整数型}。8バイト 2^64 -9223372036854775808 〜 +9223372036854775807までの整数)
@<code>{double}	@<B>{倍精度浮動小数点型}。8バイト 1.7E±308(有効15桁)までの浮動小数点数)
//}

//vspace[latex][2mm]

=== リテラル
//quote{
//noindent
リテラル(literal)とは、直値、直定数とも呼ばれ、コンピュータプログラムのソースコードなどの中に、特定のデータ型の値を直に記載したものである。また、そのように値をコードに書き入れるために定められている書式のことをいう。 @<fn>{fn-literal}
//}

//footnote[fn-literal][出典: IT用語辞典]

//table[][]{
コード例	説明
-----------------
@<code>{123}	@<B>{10進数}の整数リテラル
@<code>{0x30A2}	@<B>{16進数}の整数リテラル
//}

=== 文字列
//quote{
//noindent
文字列とは、文字を並べたもの。コンピュータ上では、数値など他の形式のデータと区別して、文字の並びを表すデータを文字列という。 @<fn>{fn-string}
//}

//footnote[fn-string][出典：IT用語辞典]

C言語には、「文字列」型は用意されていないため、「文字」の「配列」として表します。

//table[][]{
コード例	説明
-----------------
@<code>{char princess[20] = "shirayukihime";}	ダブルクォートの@<B>{文字列リテラル}。
@<code>{printf("%c", princess[0]);}	「s」が出力される。
@<code>{printf("%s", princess);}	「shirayukihime」が出力される。
//}

=== 演算子
//quote{
//noindent
演算子とは、数学やプログラミングなどで式を記述する際に用いる、演算内容を表す記号などのこと。様々な演算子が定義されており、これを組み合わせて式や命令文を構成する。 @<fn>{fn-operator}
//}

//footnote[fn-operator][出典：IT用語辞典]

以下の表は優先順位の最も高いものから最も低いものの順に並べられている。@<fn>{operator}

//footnote[operator][出典: @<href>{https://www.ibm.com/docs/ja/i/7.5?topic=operators-operator-precedence-associativity,演算子優先順位と結合順序}]

#@# //image[js_operator][][width=100%]

//table[][]{
コード例	説明
-----------------
@<code>{.または->}	メンバー選択
@<code>{[]}	添え字
@<code>{()}	関数呼び出し
@<code>{++}	後置増分
@<code>{--}	後置減分

@<code>{sizeof}	サイズ
@<code>{++}	前置増分
@<code>{--}	前置減分
@<code>{~}	ビット単位否定(1の補数)
@<code>{!}	否定
@<code>{-}	単項減算
@<code>{+}	単項正
@<code>{&}	アドレス取得
@<code>{*}	間接参照
@<code>{()}	型変換(キャスト)

@<code>{*}	乗算
@<code>{/}	除算
@<code>{%}	剰余
@<code>{+}	二項加算
@<code>{-}	二項減算
@<code>{<<}	左シフト
@<code>{>>}	右シフト
@<code>{<}	小なり
@<code>{<=}	以下
@<code>{>}	大なり
@<code>{>=}	以上
@<code>{==}	等価
@<code>{!=}	不等価
@<code>{&}	ビット論理積
@<code>{^}	ビット排他的論理和
@<code>{|}	ビット論理和

@<code>{&&}	論理積
@<code>{||}	論理和

@<code>{? :}	条件式・三項演算子

@<code>{=}	単純代入
@<code>{*=}	乗算代入
@<code>{/=}	除算代入
@<code>{%=}	剰余代入
@<code>{+=}	加算代入
@<code>{-=}	減算代入
@<code>{<<=}	左シフト代入
@<code>{>>=}	右シフト代入

@<code>{&=}	ビット積代入
@<code>{|=}	ビット和代入

@<code>{,}	カンマ
//}

=== 制御構造
プログラムの流れを制御するための構文です。
繰り返しのための「 @<code>{for文} 」、条件分岐のための「 @<code>{if文} 」などが用意されています。

//vspace[latex][7mm]

//table[][]{
例	説明
-----------------
@<code>{while(x){\}}	@<B>{whileループ}。 @<br>{}@<code>{x}が@<code>{true}なら反復処理を行う。 @<br>{}繰返回数が不明な際に用いると効果的
@<code>{for(x=0;x < y ;x++){\}}	@<B>{forループ}。 @<br>{}@<code>{x < y}が@<code>{true}なら反復処理を行う。 @<br>{}繰返回数が分かる時に使うと効果的
@<code>{if(x){/*A*/\}else{/*B*/\}}	@<B>{条件式}。 @<br>{}@<code>{x}が@<code>{true}ならAの処理を、 @<br>{}それ以外ならBの処理を行う
@<code>{switch(x){case "A":{/*A*/\} "B":{/*B*/\}\}}	@<B>{switch文}。 @<br>{}@<code>{x}が@<code>{"A"}ならAの処理を、 @<br>{}"B"ならBの処理を行う
@<code>{x ? A: B}	@<B>{条件 （三項） 演算子}。 @<br>{}@<code>{x}が@<code>{true}なら@<code>{A}の処理を、 @<br>{}それ以外なら@<code>{B}の処理を行う
@<code>{break}	@<B>{break文}。 @<br>{}現在の反復処理を終了しループから抜け出す。
@<code>{continue}	@<B>{continue文}。 @<br>{}現在の反復処理を終了し次のループに行く。
//}

=== データアクセス
プログラミング言語 Pascal の開発者 ニクラウス・ヴィルト氏による、
「プログラミング」＝「データ構造」＋「アルゴリズム」 は、広く知られています。

配列という主要なデータ構造にアクセスするために、次の構文が用意されています。

//vspace[latex][7mm]

//table[][]{
コード例	説明
-----------------
@<code>{array[0]}	配列への@<B>{インデックスアクセス}
//}

=== 関数宣言
//quote{
//noindent
関数とは、コンピュータプログラム上で定義されるサブルーチンの一種で、数学の関数のように与えられた値（引数）を元に何らかの計算や処理を行い、結果を呼び出し元に返すもののこと。 @<fn>{fn-function}
//}

//footnote[fn-function][出典：IT用語辞典]

//table[][]{
サンプル	説明
-----------------
@<code>{int add(x, y){ return x + y; \}}  	@<B>{関数の一例} @<br>{}仮引数xとyの和を返す関数
//}

#@# === その他
#@# //table[][]{
#@# コード	説明
#@# -----------------
#@# @<code>{x;}	文
#@# @<code>{{ \}}	ブロック文
#@# //}

====[column] 金の延棒クイズ 【解答】

最後までお読みくださり、ありがとうございます。金の延棒クイズの解答です。
//blankline

//sideimage[gold_table2][35mm][sep=5mm,side=R]{
２回鋏を入れて、金の延棒を１と２と４の大きさに分割します。

一日目のお支払いには、１の延棒を渡します。

二日目のお支払いには、２の延棒を渡して、先に渡した１の延棒は返してもらいます。

三日目のお支払いには、１の延棒も渡します。

四日目のお支払いには、大きな４の延棒を渡し、２と１の延棒は返してもらいます。

五日目のお支払いには、１の延棒も渡します。

六日目のお支払いには、２の延棒を渡して、先に渡した１の延棒は返してもらいます。

七日目のお支払いには、全ての延棒を渡します。

//}
//blankline

延棒の有無を @<code>{0} と @<code>{1} で表すと二進数と対応しています。

意外なところに潜む二進数。探してみてくださいね。
