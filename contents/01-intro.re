= Ｃ言語の紹介

== 暮らしに生きるＣ言語

//abstract{
  暮らしの中の様々なところで、コンピュータが使われています。そしてコンピュータプログラムの大きな部分を占めるのが「Ｃ言語」です。OS(オペレーティングシステム)や組み込み系など様々なところでＣ言語は使われています。
//}

//image[kurashi][][width=100%]

: コンピュータ (Mac / iPad / iPhone)
    なんといってもコンピュータの代表です。いろいろなウェブサイトを見たり、書類作成などお仕事に活用したり、そして「プログラミング」など。
    iPadでお絵描きや読書、iPhoneで連絡を取り合ったり、写真や音楽、ゲームなどを楽しむことも出来ます。
    ロケットを打ち上げ、宇宙観測や天気予報に活かしたり、都市計画から住宅設計、工場で車や船、飛行機など様々なものを清算したり、音楽や映画、アニメーションなど芸術の分野に至るまで、様々な分野でコンピュータは使われています。

: 衣服
    「天衣無縫」-「天人や天女の着物には縫い目がないという意から、詩文などが、よけいな修飾がなく、自然でわざとらしくなく完成されていること。また、人柄が純真で素直で、まったく嫌みがないさま。物事が完全無欠であることの形容(goo辞書)」

    衣食住は、人が生きる上で生活の基盤となる要素です。大麻、木綿、絹糸、@<ruby>{古,いにしえ}の昔から日本人の身を@<ruby>{纏,まと}う衣服に用いられてきました。
    縦糸と横糸を編んで一枚の布にして、布から切り取って縫いあわせて一着の衣服を仕立てていきます。コンピュータの活用により編み機から直接衣服を生み出すことが出来るようになりました。縫い目がないから着心地も良く、布の無駄もないとの特徴を持ちます。夢であった「天衣無縫」が顕現した瞬間です。

: 炊飯器
    美味しい御飯を炊き上げてくれる炊飯器。「初めちょろちょろ、中ぱっぱ、赤子泣いてもふた取るな」と、朝早くから起きて@<ruby>{竃, かまど}で御飯を炊くのはなかなか難しいものでした。キャンプで@<ruby>{飯盒, はんごう}炊飯した経験をお持ちの方もいらっしゃると思いますが、火加減が難しく焦げになってしまったり芯が残ってしまったこともあるかと思います。火力の調整をしたり、毎朝御飯が炊き上がるためのタイマー機能など、小さなコンピュータ（マイコン）を組み込むことで、美味しい御飯を頂けるようになりました。

: エアコン
    部屋にあるエアコン。暑い夏には涼風を、寒い冬には暖風を送り、快適に過ごせるよう室温を調整しています。部屋の温度を感じるセンサー機能、設定温度を保つように計算する演算機能、実際に風を送り出す送風機能から成り立っています。

: 給湯器
    台所や浴室の給湯器もコンピュータの産物です。昔の人のお風呂として思い浮かぶのは、五右衛門風呂でしょうか。川や井戸から水を汲んできて、薪でお湯を沸かして、湯加減を確かめてと、お風呂は贅沢品でしたので、庶民は銭湯へ通いました。
    今ではとても簡単に給湯器を設定すると、浴槽一杯に給湯してくれ、温かいシャワーも使うことが出来ます。

: 信号機
    会社や学校へ行く途中に見かける信号機。これにもコンピュータが使われています。赤信号、青信号と、色を変えるのはもちろん、道路の状況に応じて、近くの信号機と連携、青信号の長さを調整することで渋滞緩和を図るなどしています。

: バス
    通勤通学に電車やバスを利用する方も多いでしょう。例えば「さくら高校 @<small>{行}」と電光掲示板で行先表示したり、現金の他、ICカードを@<ruby>{翳,かざ}すことで乗車代金を払うことが出来ます。車両自体のガソリンや電気自動車の出力を制御する際や、バス停に「停留所を発車しました」と運行状況表示するなどの用途にも使われています。写真は、茨城県境町の「自動運転バス」 @<fn>{bus} で、地域の足として活躍しています。

//footnote[bus][@<href>{https://www.town.ibaraki-sakai.lg.jp/page/page002440.html, 自治体初！境町で自動運転バスを定常運行しています}]


こうして見てきただけでも、身の回りのいろいろなところにコンピュータが使われていることが分かります。
他にはどこに使われているでしょうか。家の中で、お店で、学校や会社でなど、探してみましょう。

== Ｃ言語を創った人々

Ｃ言語を開発した方々を Wikipedia から 引用しつつ、ご紹介いたします。

//sideimage[Brian_Kernighan][40mm][sep=5mm]{
@<B>{ブライアン・カーニハン}
@<br>{}
ブライアン・カーニハンは、ベル研究所に在籍していたカナダ出身の計算機科学者である。C言語やUNIXの開発者であるデニス・リッチー、ケン・トンプソンと共に、C言語およびUNIXに対する多くの研究開発結果による貢献で知られている。

デニス・リッチーと共著の『プログラミング言語C』(通称：K&R) は、事実上の規格書として扱われ、現在でも古典的な教科書の一つである。

多くのプログラミング言語入門書で、最初のプログラムとして書かれる @<code>{Hello world} は、彼がベル研究所で書いたB言語のチュートリアルで初めて使われた。
//}

//vspace[latex][7mm]

//sideimage[Dennis_Ritchie][40mm][sep=5mm]{
@<B>{デニス・リッチー}
@<br>{}
アメリカ合衆国の計算機科学者。1969年頃、同僚のケン・トンプソンと共に、ベル研究所で独自のオペレーティングシステム UNIX を作り始める。このUNIX上で動作するアプリケーション作成の為に、トンプソンによってB言語が開発され、リッチーがこれにデータ型と新しい文法等を追加しC言語が出来た。1973年にアセンブリ言語で書かれていたUNIXをC言語で書き換えることに成功した。C言語の開発は、リッチーのUNIXへの最大の貢献である。

1983年、UNIX開発の功績により、ケン・トンプソンと共にチューリング賞を受賞している。今日、C言語は組込システムからスーパーコンピュータまであらゆるプラットフォームで用いられ、彼の業績は偉大である。
//}

//vspace[latex][7mm]

//sideimage[Ken_Thompson][40mm][sep=5mm]{
@<B>{ケン・トンプソン}
@<br>{}
  ケン・トンプソンは、アメリカ合衆国の計算機科学者。長年ベル研究所に勤め、オリジナルのUnixを開発した。またC言語の前身であるB言語を開発した。2006年からGoogleで勤務しており、Goを共同開発した。
他の主な業績として、正規表現、テキストエディタQEDとed、UTF-8コードの定義に加え、チェスの終盤定跡データベースやチェスマシンBelleの開発などコンピュータチェスへの貢献がある。1983年に彼の長年の同僚であるデニス・リッチーと共にチューリング賞を受賞した。「信用を信頼することについての考察」は、トンプソンハックとして知られる、セキュリティに関する重要な研究成果である。
//}

//image[The_C_Programming_Language][プログラミング言語C][width=40%]

== Ｃ言語の特徴

@<B>{@<ruby>{Ｃ言語,シーげんご}} は、1972年にAT&Tベル研究所の@<B>{デニス・リッチー}氏が主体となって開発したプログラミング言語です。

Ｃ言語の特徴などを Wikipedia から 引用しつつ、ご紹介いたします。

=== 特徴
 * 汎用性が高い。プログラムの自由度や、目的に応じた拡張が容易であるため、パソコンソフトからゲームの作成、機械制御やシステム管理など、あらゆる分野に適応している。
 * 対応する機器の範囲が広い。パソコンはもちろん、自動車や家電の組込み用マイコンからスーパーコンピュータまで、C言語を使用できるハードウェアは多様である。多目的性と、対応機器の多彩さのため、「コンピュータを使ってやること」は大抵、C言語で対応可能である。
 * 商用・非商用を問わず、採用ソフトウェア分野が広い。作成や使用のための補助的なソフトウェアが豊富である。
#@# * 機械語に変換するソフトなどの開発環境がCPUに付属していたり無償だったりするものもあるため、ライセンス料の支払いをしなくても使用が始められる。
 * 開発時期が古いことから、文法に機械語の影響が強く、仕様自体は単純ではあるが明快ではなく難解である。この欠点を改良するためのちに開発された後発言語に比較し、プログラマが記述しなければならないことが多く、低水準言語のように面倒で習得しにくい側面を持つ。

 * アマチュアからプロ技術者まで、プログラマ人口が多く、プログラマのコミュニティが充実している。C言語は使用者の多さから、正負の両面含め、プログラミング文化に大きな影響を及ぼしている。

#@# * 言語の適用先であるUNIXの場合、大抵のことがスクリプト言語・マクロプロセッサやフィルタやそれらの組み合わせで処理できるため、うまく分野の棲み分けができていた面があった。仕様規格・派生言語も多く幅広い領域への移植の結果、適切でない分野にC言語が使われている場合もある。

 * C言語は手続き型言語である。コンパイラ言語とOSを念頭に設計している。ハードウェアをある程度抽象化しつつも、必要に応じて機械語やアセンブラのコードと同じことを実現できるようなコンピュータ寄りの言語仕様になっている。低水準な記述ができる高級言語とも、高級言語の顔をした低級言語とも言うことがある。

 * C コンパイラは、移植の容易性、自由度、実行速度、コンパイル速度などを追求した。代わりにコンパイル後のコードの安全性を犠牲にしている。また、詳細を規格で規定せず処理系に委ねている部分が多く、C言語で書かれたソフトウェアでは処理系依存のコードが氾濫する原因となった。セキュリティー上の脆弱性や潜在的バグによる想定外の動作、コンパイラによる最適化の難しさといった問題を抱えており、最適化するとコンパイル速度が遅くなるなどの欠点が生じることがある。

 * UNIXおよび C コンパイラの移植性を高めるために開発してきた経緯から、オペレーティングシステムカーネルおよびコンパイラ向けの低水準記述ができる。

=== 自由度
 * 文の区切りを終端記号 セミコロン「;」で表し、改行文字にも空白にもトークンの区切りとしての意味しか持たせない「フリーフォーマット」という形式を採用している。中括弧{ }によるブロック構造およびスコープをサポートする。

 * ALGOL の思想を受け継いで @<b>{構造化プログラミング} に対応している。手順を入れ子構造で示して見通しの良い記述をすることができる。

 * モジュール化がファイルを単位として可能。モジュール内だけで有効な名前を使うことが出来るスコープを持っている。

 * プログラムを戻り値つきのサブルーチンに分離できる。C言語ではこれを関数と呼び、関数内のプログラムコードでは、独立した変数が使用できる。これにより、データの流れがブロックごとに完結し、デバッグが容易になり、また関数の再帰呼び出しも可能となる。また、多人数での共同開発の際にも変数名の衝突が回避しやすくなる。
#@# なお、C言語ではUNIXのようなOSを前提としたホスト環境と、割り込み制御のようなOSを前提としないフリースタンディング環境とがある。ホスト環境では、プログラム開始直後に実行するプログラム要素を main という名前の関数として定義する。フリースタンディング環境では、エントリポイントと呼ばれるアドレスに置かれたコードをプログラムの開始点とするが、それがmain関数である必要はない。

 * C言語では、main関数と、標準ライブラリのprintf, scanf 関数（およびその類型の関数）は、引数が可変という特殊な性格の関数である。K&Rでは、この特殊な関数mainとprintfを使った例を最初に示している。

 * システム記述言語として開発されたため、高級言語であるがアセンブラ的な低水準の操作ができる。ポインタ演算、ビットごとの論理演算、シフト演算などの機能を持ち、ハードウェアに密着した処理を効率よく記述できる。これはオペレーティングシステムやデバイスドライバなどを記述する上では便利であるが、注意深く利用しないと発見しにくいバグの原因となる。ライブラリ関数は、C言語規格が規定している関数と、OSが規定している関数との間の整合性、棲み分けなどが流動的である。

#@# * 配列とポインタとでは、宣言の仕方と領域確保の仕組みは異なっているが、配列アクセスそのものは、ポインタ演算および間接参照と同等である。ポインタを配列表記でアクセスすることや、配列をポインタ表記でアクセスすることができる糖衣構文がある。

 * 組み込みの整数型および浮動小数点数型のほか、構造体、共用体、列挙体（列挙型）によるユーザー定義のデータ型や列挙定数をサポートする。構造体および共用体はビットフィールドをサポートする。

 * 多くの処理系がインラインアセンブラを搭載しているほか、アセンブラで出力したオブジェクトとのリンクが容易になっている。これにより速度が要求される部分だけをアセンブリ言語で記述するということが容易に行えることが多い。

#@# === コンパイラ仕様
#@#  *  コンパイラの処理が1パスで済む仕様になっている。ANSI-C:1989では宣言のない変数はintを想定することになっていた。ISO/IEC C:1999以降では変数はその使用より前に宣言する必要がある。関数の宣言がないと、戻り値や引数をint型とみなす仕様は、自由な発想を促すプログラミングの視点で好ましいが、型検査・型証明の仕組みが十分にないと不具合の原因になることがある。後継言語では記述によって先読みが必要になりうる。
#@#  * マクロ記述やコンパイル条件の指定などが出来る前処理指令が標準化されている。前処理指令の解釈をするプリプロセッサを持っている。プリプロセッサ（preprocesser）は、その名の通りコンパイル処理の前に自動的に実行される。コンパイラの機能として、プリプロセッサを通しただけの段階のソースコードを出力可能になっているものがある。前処理の結果を検査することで、設計者の意図と前処理の結果のずれがないか確認できる。

=== 処理系の簡素化
 プログラムの内容によっては、以下に対して脆弱性対策を施しても実行速度の低下が無視できる程度であることも多く、欠点とみなされることも少なくない。

 * 配列参照時の自動的な添字のチェックをしない
  これを要因とする代表的なバグが、固定長のバッファ領域をはみだしてデータの書き込みが行われてしまう「バッファオーバーフロー」である。範囲外のアクセスは、書き込みだけでなく読み取りの場合も未定義動作を引き起こす。標準ライブラリにはバッファオーバーフローや範囲外アクセスを考慮していない関数があり、かつ多用されがちなため、しばしば脆弱性の原因となる。また、Cではプログラムにより明示的に制御（動的メモリ確保）することで可変長配列の実現を可能にしているが、確保した領域の範囲外にアクセスしても自動的な伸長は行なわれない。
  後継言語では、標準ライブラリまたは組み込み型により可変長配列をサポートしていたり、範囲外アクセス時には例外（実行時エラー）を送出するなどして安全性を優先していたりすることが多い。

 * 文字列を格納するための特別な型が存在しない
  文字列にはchar型の配列を利用する。言語仕様上に特別な扱いはないが、ヌル文字（'\0'）を終端とする文字列表現を使い、その操作をする標準ライブラリ関数がある。これは実質的にメモリ領域のポインタアクセスそのもので、固定長バッファに対して、それより長い可変長の文字列を書き込んでしまうことがあり、バッファオーバーランの元凶の1つとなっている。
  後継言語では文字列処理を特に強化している場合が多く、標準ライブラリあるいは言語仕様による組み込みの文字列型を提供している。

 * 自動変数の自動的な初期化をしない
  自動変数（静的でないローカル変数）は変数の中でも最も頻繁に用いられる。初期化されていない変数を参照した場合、値は不定となるが、不定な値へのアクセスは未定義の動作であるので、コンパイラ最適化の過程で想定しない形に改変することもある。変数宣言・初期化の仕様による制限から、変数宣言の時点で初期化せず後で代入することで初期化に代えることが日常的で、誤って不定の値の変数を読み出すバグを作り込みやすい。なお自動変数の自動とは変数の領域の確保と解放が自動であるという意味であり、自動的に初期化されるという意味ではない。
  後継言語では、明示的な初期化が記述されていない変数は、不定値ではなくその変数の型の既定値（ゼロあるいはゼロ相当の値）で初期化される仕様になっていることが多い。

=== その他
 * 文字の大文字・小文字を区別する。
 * 入出力を含めほとんどの機能が、C言語自身で書かかれたライブラリによって提供される。このことは、C言語の機種依存性が低く、入出力関係ライブラリをのぞいた部分は移植性（ポータビリティ）が高いことを意味する。さまざまな機種があるUNIXの世界でC言語が普及した理由のひとつである。

 * プログラムの実行に必要とするハードウェア資源が、アセンブラよりは多いが他の高級言語より少なくてすむため、現在さまざまな電化製品などの組み込みシステムでも使用されている。

 * 組込み向けの場合は、プログラミング言語として、アセンブラ以外では、C と C++ しか用意していないことがある。その場合、他のプログラミング言語は、C や C++ で書かれた処理系が存在すれば、コンパイルすることにより利用可能となることもあるが、メモリ制約などで動作しないことがある。

 * ANSI/ISOにより規格が標準化された後は言語仕様の変化が小さく安定していること、C言語のプログラマ人口やコード資産が多いこと、C++やObjective-CからC言語関数を直接利用できること、また必要に応じて他のプログラミング言語からC言語関数を呼び出すためのバインディングを記述することが容易であることなどから、APIの外部仕様としてC言語の関数インターフェイスが選ばれることが多い。例えばOpenGLやOpenCLのようなオープン規格は第一級言語としてC言語を採用している。

=== コード例
#@#
#@#
#@#
#@# C言語の Hello world プログラムには、ホスト環境を前提とするか、フリースタンディング環境を前提とするかで、方向性が異なる。入門書によって趣が異なるいくらかの方向性が存在する。ホスト環境を前提とする場合には、入出力の利用により、動作をすぐに確かめることができる。標準Cライブラリ @<code>{stdio.h}の@<code>{printf}関数を利用したものを例示する場合、以下のようなものがある。


//list[][Hello world プログラム]{
#include <stdio.h>

int main(int argc, char* argv[]){
  printf("Hello, world!\n");
  return 0;
}
//}

C言語は @<code>{main} 関数から実行され、
@<code>{printf} 関数は変数や書式化された文字列などが表示できる比較的高機能な出力関数である。
コード中の「@<code>{\n}」は改行を表している。

=== 主な制御構造
  * @<code>{while文}
  * @<code>{do-while文}
  * @<code>{for文}
  * @<code>{if文}
  * @<code>{switch文}
  * @<code>{関数}
  * @<code>{return文}

=== 誕生
C言語は、AT&T ベル研究所のケン・トンプソンが開発したB言語の改良として誕生した。

 1973年、トンプソンとUNIXの開発を行っていたデニス・リッチーは B 言語を改良し、実行可能な機械語を直接生成するC言語のコンパイラを開発した。UNIX は大部分をC言語によって書き換え、C言語のコンパイラ自体も移植性の高い実装の Portable C Compiler に置き換わったこともあり、UNIX上のプログラムはその後にC言語を広く利用するようになった。

=== UNIX環境とC言語
アセンブラとの親和性が高いために、ハードウェアに密着したコーディングがやりやすかったこと、言語仕様が小さいためコンパイラの開発が楽だったこと、小さな資源で動く実行プログラムを作りやすかったこと、UNIX環境での実績があり、後述の K&R といった解説文書が存在していたことなど、さまざまな要因からC言語は業務開発や情報処理研究での利用者を増やしていった。特にメーカー間でオペレーティングシステムやCPUなどのアーキテクチャが違う UNIX 環境では再移植の必要性がしばしば生じて、プログラムをC言語で書いてソースレベル互換を確保することが標準となった。

=== パソコンとC言語
 1980年代に普及し始めたパーソナルコンピュータは当初、8ビットCPUでROM-BASICを搭載していたものも多く、BASICが普及していたが、80年代後半以降、16ビットCPUを採用しメモリも増えた（ROM-BASIC 非搭載の）パソコンが主流になりだすと、2万円前後の安価なコンパイラが存在したこともあり、ユーザーが急増した。8ビットや8086系のパソコンへの移植は、ポインタなどに制限や拡張を加えることで解決していた。

=== 現在のC言語
 1990年代中盤以降は、最初に学ぶプログラミング言語としても主流となった。GUI環境の普及とオブジェクト指向の普及により Java、Objective-C、C++、PHP、Visual Basic、などの言語の利用者も増加したため、広く利用されるプログラミング言語の数は増加傾向にある。現在でもJava, C#, C++などC言語の後続言語を含めて、C言語は比較的移植性に優れた言語であり、業務用開発やフリーソフトウェア開発、C++ などの実装が困難な組み込みなどの小規模のシステムで、幅広く利用されている。

== C言語の規格
=== K&R
 リッチーとカーニハンの共著である「@<B>{The C Programming Language}」1978年を出版。その後標準ができるまで実質的なC言語の標準として参照。C言語は発展可能な言語で、この本の記述も発展の可能性のある部分は厳密な記述をしておらず、曖昧な部分が存在していた。C言語が普及するとともに、互換性のない処理系が数多く誕生した。これはプログラミング言語でしばしば起こる現象であり、C言語固有の現象ではない。

その後、C89/C90, C99, C11, C17 と仕様が整備された。

== 関連するプログラミング言語

=== 先祖
 : ALGOL
  ヨーロッパ生まれのアルゴリズム記述言語。Pascal やC言語などに影響を与えたとされる。
 : BCPL
  MULTICS で作成された高級言語。
 : B言語
  初期の UNIX で作成されたインタプリタ方式の高級言語。BCPLを元に作られ、Cの原型となった。

=== 継承・拡張・サブセット
 : C++
    C言語を拡張してオブジェクト指向化したもの。Simulaの影響を強く受けている。当初はC言語のスーパーセットだったが、現在は細かい部分において非互換仕様が増えている。
 : Objective-C
    C言語を拡張してオブジェクト指向化したもの。C言語に Smalltalk のオブジェクトシステムを取り付けたような設計で、互換性は保たれている。C言語からの拡張部分がC++と干渉しないため、C++と混在した記述が可能。
 : Java
    C++よりも言語文法レベルでオブジェクト指向を重視した言語。バッファオーバーランなどの危険性が高いポインタといったローレベルな要素を言語文法から排除している。仮想マシン（Java VM, JVM）上で動作する。
 : C#
    マイクロソフトが.NET Framework向けに開発した言語。文法はC言語およびC++に近い書式を持ち、Javaと似ている部分も存在するが、機能的にはDelphiがベースとなっている。
 : Rust
    C言語およびC++に代わるシステムプログラミング言語を目指している言語。言語レベルでのRAIIの強制による自動メモリ管理機構を持ち、ガベージコレクション無しでも手動のメモリ管理が不要であり、実行性能はC/C++と同等である。
 : Unified Parallel C
    並列計算向けにC99を拡張して作られた言語。
 : D言語
    C言語をベースとしABI互換を保ちつつも、テンプレートによるジェネリックプログラミングやオブジェクト指向プログラミング、関数型プログラミングなどをサポートするマルチパラダイムプログラミング言語である。
